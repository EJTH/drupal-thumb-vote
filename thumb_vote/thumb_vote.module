<?php
/**
 * Menu hook implementation
 * @return array
 */
function thumb_vote_menu(){
  $items = array(
    'json/thumbvote' => array(
      'title'              => 'Thumbvote JSON interface',
      'description'        => t('JSON interface for vote submittal through POST'),
      'page callback'      => '_thumb_vote_json_do_vote',
      'access callback'    => TRUE,
      'type'               => MENU_CALLBACK
    ),
    'admin/config/thumbvote' => array(
        'title'            => 'Thumbvote',
        'description'      => t('Setting for thumbvote module'),
        'weight'           => -5,
        'page callback'    => 'system_admin_menu_block_page',
        'access arguments' => array('administer site configuration'),
    ),
    'admin/config/thumbvote/settings' => array(
        'title'            => 'Thumbvote settings',
        'description'      => t('Change behavior of thumbvotes. Decide what content types you want to be rateable'),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('thumb_vote_admin_settings'),
        'access arguments' => array('administer site configuration'),
        'file'             => 'thumb_vote.admin.inc'
    )
  );
  return $items;
}


/**
 * Implements hook_theme();
 */
function thumb_vote_theme($existing, $type, $theme, $path) {
  return array(
    'thumbvote' => array(
      'variables' => array(
        'id'            => NULL,
        'votes'         => NULL,
        'user_vote'     => NULL,
        'display_type'  => NULL
      ),
      'template' => 'thumbvote',
      'path'     => drupal_get_path('module', 'thumb_vote').'/theme'
    )
  ); 
}


/**
 * Entity view hook for adding additional markup for the thumb voting prior to rendering.
 * @param type $node
 * @param type $type
 * @param type $view_mode
 * @param type $lang
 */
function thumb_vote_entity_view($entity, $type, $view_mode, $lang){
  global $user;
  
  //Add CSS and clientside scripts to the rendered page.
  drupal_add_css(drupal_get_path('module', 'thumb_vote').'/css/thumb_vote_style.css');
  drupal_add_js(drupal_get_path('module','thumb_vote').'/js/thumbvote.js');
  
  
  $entity_info = entity_extract_ids($type,$entity);
  
  $enttype   = $entity_info[2];
  $id        = $entity_info[0];
  
  if(in_array($enttype, variable_get('thumbvote_entity_types', array()))){
    
    $display_mode = variable_get('thumbvote_display_mode',1);
    $votes     = _thumb_vote_get_votes($id, $enttype, $display_mode);
    $user_vote = _thumb_vote_get_user_vote($user->uid, $id, $enttype);
    
    $entity->content['vote'] = array(
      '#markup' => theme('thumbvote',
        array(
          'entid'     => $id,
          'type'      => $enttype,
          'votes'     => $votes, 
          'user_vote' => $user_vote
        )
      ),
      '#weight' => variable_get('thumbvote_render_weight',-1)
    );

  }
  
}


/**
 * Page callback for thumb vote JSON interface
 * @global object $user
 */
function _thumb_vote_json_do_vote(){
  global $user;
  
  //Response is passed to the client later on.
  $response = array('success' => false);
  
  //If required data is supplied
  if(isset($_POST) 
      && isset($_POST['type'])
      && is_numeric($_POST['id']) 
      && is_numeric($_POST['vote'])){
    
    $id   = (int) $_POST['id'];
    $type = $_POST['type'];
    
    $uid  = (int) $user->uid;
    $vote = (int) $_POST['vote'];

    $display_mode = variable_get('thumbvote_display_mode',1);
    
    //Prevent skiddies from rigging the vote.
    if(abs($vote) > 1){ $vote = 0; }
    
    if($id && $uid){
      
      _thumb_vote_save($vote, $id, $type, $uid);
      
      $response = array(
        'success'     => true,
        'votes'       => _thumb_vote_get_votes($id,$type, $display_mode),
        'userVote'    => $vote,
        'displayMode' => $display_mode
      );
      
    } else {
      $response['error'] = t('Only registered users can vote!');
    }
  } else {
    $response['error'] = t('Something mysteriously happened!');
  }
  
  drupal_json_output($response);
}

/**
 * Save vote to the database.
 * @param int $vote Vote -1 | 0 | 1
 * @param int $id  Node ID
 * @param int $uid  User ID
 */
function _thumb_vote_save($vote, $id, $type, $uid){
  
  
  //Remove any previous votes by this user.
  db_delete('thumbvotes')
    ->condition('uid',$uid)
    ->condition('entity_type',$type)
    ->condition('id',$id)
  ->execute();
  
  

  if($vote != 0){
    db_insert('thumbvotes')
      ->fields(array(
        'id'          => $id,
        'uid'         => $uid,
        'entity_type' => $type,
        'vote'        => $vote
      ))
    ->execute();
  }
}

/**
 * Return vote given by user with $uid and corresponding node id
 * @param int $uid
 * @param int $id
 * @return int -1 | 0 | 1
 */
function _thumb_vote_get_user_vote($uid, $id, $type){
  $v = db_select('thumbvotes')->fields('thumbvotes',array('vote'))
    ->condition('uid',$uid)
    ->condition('id',$id)
    ->condition('entity_type',$type)
  ->execute()->fetchColumn();
  
  return (int) $v;
}

/**
 * Get representation of current votes based on the backend setting for display mode
 * @param type $id
 * @param type $type
 * @return type
 */
function _thumb_vote_get_votes($id, $type, $mode){
  $votes = '';
  switch($mode){
    case 0: 
      $votes = '';
    break;
    case 1: 
      $votes = _thumb_vote_get_vote_sum($id, $type);
      if($votes != 0){
        $votes = _thumb_vote_span_wrap($votes, ($votes > 0 ? 'positive' : 'negative') );
      }
    break;
    case 2: 
      $votes = _thumb_vote_span_wrap(_thumb_vote_get_positive($id, $type),'positive') 
        . ' / ' 
        . _thumb_vote_span_wrap(-1*_thumb_vote_get_negative($id, $type),'negative');
    break;
    case 3: 
      
      $percent = _thumb_vote_get_vote_percentage($id, $type);
      $color = _thumb_vote_percent_to_color($percent);
      
      $votes = '<span style="color:'.$color.'">'
          . $percent.'%'
          . '</span>';
    break;
  }
  
  return $votes;
}

function _thumb_vote_span_wrap($content,$class){
  return '<span class="'.$class.'">'.$content.'</span>';
}

function _thumb_vote_count_query($id,$type){
  $vote_query = db_select('thumbvotes')
      ->condition('id',$id)
      ->condition('entity_type',$type);
  
  
  return $vote_query;
}

/**
 * Returns the current vote sum for node $id. Returns false on error 
 * (ie. if you specify an invalid id).
 * @param int $id
 * @return int|boolean
 */
function _thumb_vote_get_vote_sum($id, $type){
  $vote_query = _thumb_vote_count_query($id, $type);
  
  $vote_query->addExpression('SUM(vote)','votes');
  
  $vote_result = $vote_query->execute()->fetchObject();
  
  return $vote_result ? (int)$vote_result->votes : false;
}

/**
 * Returns the positive vote percentage for $id
 * @return int Percentage of positive votes.
 */
function _thumb_vote_get_vote_percentage($id, $type){
  $votes_total = _thumb_vote_count_query($id, $type);
  $votes_total->addExpression('COUNT(*)','c');
  
  $votes_total = $votes_total->execute()->fetchColumn();
  
  $votes_positive = _thumb_vote_count_query($id, $type);
  $votes_positive->addExpression('COUNT(*)','c');
  $votes_positive->condition('vote','0','>');
  
  $votes_positive = $votes_positive->execute()->fetchColumn();
  
  return round(($votes_positive / $votes_total) * 100);
}


/**
 * 
 * @param type $id
 * @param type $type
 * @return type
 */
function _thumb_vote_get_negative($id, $type){
  $q = _thumb_vote_count_query($id, $type);
  $q->addExpression('COUNT(*)','positive');
  $q->condition('vote','0','<');
  $q = $q->execute();
  
  return $q ? $q->fetchColumn() : 0;
}

/**
 * 
 * @param type $id
 * @param type $type
 * @return type
 */
function _thumb_vote_get_positive($id, $type){
  $q = db_query("SELECT COUNT(*) AS positive FROM thumbvotes "
      . "WHERE id = :id AND entity_type = :type AND vote > 0", array(
        ':id'     => $id,
        ':type'   => $type,
  ));
  
  return $q ? $q->fetchColumn() : 0;
}

function _thumb_vote_percent_to_color($percent){
  
  $red = ((100-$percent)/100) * 255;
  $green = ($percent/100) * 255;
  
  return '#'._thumb_vote_dec2hex($red)._thumb_vote_dec2hex($green).'00';
}

function _thumb_vote_dec2hex($int){
  $result = dechex($int);
  if(strlen($result) < 2){
    $result = '0'.$result;
  }
  return $result;
}